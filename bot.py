from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram username –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
YOUR_USERNAME = "andriy_pisotskiy"

# –°–ø–∏—Å–æ–∫ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ–≤
PSYCHOLOGISTS = [
    ("–¢–∫–∞—á–µ–Ω–∫–æ –Æ–ª—ñ—è –õ–µ–æ–Ω—ñ–¥—ñ–≤–Ω–∞", "https://doc.ua/ua/doctor/kiev/22001-yuliya-tkachenko/about"),
    ("–û–ª—å–≥–∞ –°–µ—Ä–≥—ñ—î–Ω–∫–æ", "https://k-s.org.ua/branches/team/olga-sergiyenko/"),
    ("–®–∫–≤–∞—Ä–æ–∫ –ù–∞—Ç–∞–ª—ñ—è –ë–æ—Ä–∏—Å—ñ–≤–Ω–∞", "https://uccbt.com.ua/specialists/shkvarok-nataliya-borysivna/")
]

user_choices = {}

async def start(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("–ì–æ—Ç–æ–≤–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∏", callback_data='start_course')]]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! üéÅ –¶–µ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ ‚Äì 5 —Å–µ–∞–Ω—Å—ñ–≤ —É –ø—Å–∏—Ö–æ–ª–æ–≥–∞.", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_choice(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "start_course":
        keyboard = [
            [InlineKeyboardButton(name, url=url, callback_data=f"choose_{i}")] for i, (name, url) in enumerate(PSYCHOLOGISTS)
        ]
        keyboard.append([InlineKeyboardButton("–Ü–Ω—à–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥", callback_data="choose_other")])
        await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("choose_"):
        user_id = query.from_user.id
        if query.data == "choose_other":
            await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞:")
            user_choices[user_id] = 'awaiting_custom_input'
        else:
            index = int(query.data.split("_")[1])
            name, url = PSYCHOLOGISTS[index]
            await notify_user(context, name, url, user_id)
            await query.message.reply_text("–î—è–∫—É—é! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é :)")

async def notify_user(context: CallbackContext, name, url, user_id):
    message = f"üë§ –î—ñ–≤—á–∏–Ω–∞ –≤–∏–±—Ä–∞–ª–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n{name}\n{url}"
    await context.bot.send_message(chat_id=f"@{YOUR_USERNAME}", text=message)
    user_choices[user_id] = None

async def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_choices.get(user_id) == 'awaiting_custom_input':
        await notify_user(context, update.message.text, "-", user_id)
        await update.message.reply_text("–î—è–∫—É—é! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é :)")

def main():
    import os
    TOKEN = os.getenv("BOT_TOKEN")  # –ê–ë–û –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤ —Ç–æ–∫–µ–Ω —É –ª–∞–ø–∫–∏: "123456:ABC..."
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_choice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
