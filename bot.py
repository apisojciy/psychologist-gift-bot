import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è (–¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –î–∞–Ω—ñ
YOUR_USERNAME = "andriy_pisotskiy"
psychologists = [
    ("–¢–∫–∞—á–µ–Ω–∫–æ –Æ–ª—ñ—è –õ–µ–æ–Ω—ñ–¥—ñ–≤–Ω–∞", "https://doc.ua/ua/doctor/kiev/22001-yuliya-tkachenko/about"),
    ("–û–ª—å–≥–∞ –°–µ—Ä–≥—ñ—î–Ω–∫–æ", "https://k-s.org.ua/branches/team/olga-sergiyenko/"),
    ("–®–∫–≤–∞—Ä–æ–∫ –ù–∞—Ç–∞–ª—ñ—è –ë–æ—Ä–∏—Å—ñ–≤–Ω–∞", "https://uccbt.com.ua/specialists/shkvarok-nataliya-borysivna/")
]

# –ï—Ç–∞–ø–∏ –¥—ñ–∞–ª–æ–≥—É
CHOOSING, TYPING_CUSTOM = range(2)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ì–æ—Ç–æ–≤–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∏", callback_data="start_course")]]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∞ üåø", reply_markup=InlineKeyboardMarkup(keyboard))

# –ù–∞—Ç–∏—Å–Ω—É—Ç–æ "–ì–æ—Ç–æ–≤–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∏"
async def start_course_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await show_psychologists(update, context)

# –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ–≤
async def show_psychologists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton(name, url=url, callback_data=f"choose_{i}")] for i, (name, url) in enumerate(psychologists)
    ]
    buttons.append([InlineKeyboardButton("–Ü–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç", callback_data="custom")])
    buttons.append([InlineKeyboardButton("üîÅ –ó–º—ñ–Ω–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="change")]) if context.user_data.get("chosen") else None

    if update.callback_query:
        await update.callback_query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    return CHOOSING

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("choose_"):
        index = int(query.data.split("_")[1])
        name, url = psychologists[index]
        text = f"üë§ –í–∏–±—Ä–∞–Ω–æ: {name}\nüîó {url}"
        context.user_data["chosen"] = text

        await notify_sender(context, update.effective_user, text)
        await query.edit_message_text("–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–±—ñ—Ä! –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –Ω–∞–¥–∞–º–æ –¥–µ—Ç–∞–ª—ñ —Å–µ–∞–Ω—Å—É üòä")

        return ConversationHandler.END

    elif query.data == "custom":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞:")
        return TYPING_CUSTOM

    elif query.data == "change":
        return await show_psychologists(update, context)

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —ñ–Ω—à–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É
async def handle_custom_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = f"üë§ –í–∏–±—Ä–∞–Ω–æ (—Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç): {update.message.text}"
    context.user_data["chosen"] = text

    await notify_sender(context, update.effective_user, text)
    await update.message.reply_text("–î—è–∫—É—î–º–æ! –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –Ω–∞–¥–∞–º–æ –¥–µ—Ç–∞–ª—ñ —Å–µ–∞–Ω—Å—É üòä")
    return ConversationHandler.END

# –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫—É
async def notify_sender(context: ContextTypes.DEFAULT_TYPE, user, text):
    await context.bot.send_message(chat_id=YOUR_USERNAME, text=f"üéÅ –í–∏–±—ñ—Ä –≤—ñ–¥ @{user.username or user.first_name}:\n{text}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = ApplicationBuilder().token("7588127606:AAGscvK5SeIdZ3Qsx_oNzR4cK0A6njFD9mM").build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_course_callback, pattern="^start_course$")],
        states={
            CHOOSING: [CallbackQueryHandler(handle_choice)],
            TYPING_CUSTOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_text)],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
